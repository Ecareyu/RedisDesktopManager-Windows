# https://www.appveyor.com/docs/windows-images-software/#visual-studio-2017
image: Visual Studio 2017
version: 2020.{build}
clone_depth: 5
skip_tags: true

install:
  - set PYTHON_EMBEDDED_VERSION=3.7.7

  # directories
  - set REPO_DIR=%CD%
  - set SRC_DIR=C:\projects\RDM
  - set RESOURCE_DIR=%SRC_DIR%\build\windows\installer\resources
  - set OPENSSL_DIR=C:\OpenSSL-Win64
  - set GITBASH_DIR=C:\Program Files\Git\usr\bin
  - set PY_DIR=C:\Python37-x64
  - set QT_DIR=C:\Qt\5.13\msvc2017_64

  # prefer using Linux utils such as "find"
  - set PATH=%GITBASH_DIR%;%PY_DIR%;%QT_DIR%\bin;%PATH%

  # update all submodules for this repo
  - git submodule update --init --recursive

  # clone the RedisDesktopManager repo
  - set /P RDM_TARGET_BRANCH= < clone-branch.txt
  - git clone
    --depth=1
    --recursive
    --branch=%RDM_TARGET_BRANCH%
    https://github.com/uglide/RedisDesktopManager.git
    "%SRC_DIR%"

  # apply patches to the RedisDesktopManager repo
  - cp -rf %REPO_DIR%/deps/* %SRC_DIR%
  - cd %SRC_DIR%
  - git apply -v 0001-Patch-RedisDesktopManager.patch
  - cd %SRC_DIR%/3rdparty/qredisclient
  - git apply -v 0001-Patch-qredisclient.patch
  - cd %SRC_DIR%/3rdparty/qredisclient/3rdparty/hiredis
  - git apply -v ../hiredis-win.patch

  # enable environment
  - call
    "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat"
    x86_amd64

  - qmake -v
  - python -VV

before_build:
  - cd %SRC_DIR%
  - git rev-parse --short=8 HEAD > hash.txt
  - set /P RDM_HASH= < hash.txt

  # replace the version like "2020.0.0-dev" into "2020.0.BUILD_NUMBER-f6430351"
  - sed -E -i"" src/rdm.pro -e 's@([0-9]+)\\.([0-9]+)\\.([0-9]+)-dev@\1.\2.%APPVEYOR_BUILD_NUMBER%-%RDM_HASH%@g'
  - grep "    VERSION=" src/rdm.pro | grep -Eoh "[0-9]+\\.[0-9]+\\.[0-9]+" > version.txt
  - set /P RDM_VERSION= < version.txt

  - echo %RDM_VERSION%-%RDM_HASH%> release-tag.txt
  - set /P RELEASE_TAG= < release-tag.txt
  - echo BUILD FOR %RELEASE_TAG%

build_script:
  # build qsshclient
  - cd %SRC_DIR%/3rdparty/qsshclient
  - qmake
  - nmake /S /NOLOGO release

  # build libssh2
  - cd %SRC_DIR%/3rdparty/qsshclient/3rdparty/libssh2
  - cmake
    -G "Visual Studio 15 2017 Win64"
    -DOPENSSL_ROOT_DIR="%OPENSSL_DIR%"
    -DCRYPTO_BACKEND=OpenSSL
    -DCMAKE_BUILD_TYPE=RELEASE
    -DBUILD_SHARED_LIBS=on
    -DBUILD_EXAMPLES=off
    -DBUILD_TESTING=off
    -DCMAKE_INSTALL_PREFIX=./output
    --build .
  - cmake
    --build .
    --config "Release"
    --target install
  - mkdir build\src\release
  - cp -f output/lib/libssh2.lib %SRC_DIR%/3rdparty/qsshclient/
  - cp -f output/bin/libssh2.dll %RESOURCE_DIR%/

  # build app
  - cd %SRC_DIR%
  - python ./build/utils/set_version.py %RDM_VERSION% > ./src/version.h
  - cd %SRC_DIR%/3rdparty
  - nuget install zlib-msvc14-x64 -Version 1.2.11.7795

  - cd %SRC_DIR%/src
  - lrelease rdm.pro
  - qmake
    CONFIG+=release
    DEFINES+="SSH_SUPPORT=1"
    DEFINES+="RDM_APPSTORE=1"
    LIBS+="-L%SRC_DIR%/3rdparty/qsshclient"
    LIBS+="-lqsshclient -llibssh2"
    INCLUDEPATH+="%SRC_DIR%/3rdparty/qsshclient/src"
    INCLUDEPATH+="%SRC_DIR%/3rdparty/qsshclient/3rdparty/libssh2/output/include"
  - nmake /S /NOLOGO release

  - cd %SRC_DIR%
  - cp -f bin/windows/release/rdm.exe %RESOURCE_DIR%/

  # make rdm.exe Qt-distributable
  - cd %RESOURCE_DIR%
  - windeployqt
    --no-angle
    --no-opengl-sw
    --no-compiler-runtime
    --no-translations
    --release
    --force
    --qmldir %SRC_DIR%/src/qml
    rdm.exe

  # seems to be useless
  - rm -rf
    platforminputcontexts/
    qmltooling/
    QtGraphicalEffects/
    imageformats/qtiff.dll
    imageformats/qwebp.dll

  # install python deps
  - cd %RESOURCE_DIR%
  - curl -fsSL
    -o python-embedded.zip
    "https://www.python.org/ftp/python/%PYTHON_EMBEDDED_VERSION%/python-%PYTHON_EMBEDDED_VERSION%-embed-amd64.zip"
  - 7z.exe x python-embedded.zip python37.zip python37.dll
  - rm -f python-embedded.zip
  - md Lib
  - cp -rf %SRC_DIR%/src/py Lib/site-packages
  - cd Lib/site-packages
  - python -m pip install -r ./requirements.txt -t .
  - python -m compileall -b .
  - find . -name '*.py' -type f -print0 | xargs -0 rm -f
  - find . -name __pycache__ -type d -print0 | xargs -0 rm -rf
  - rm -rf py.qrc requirements.txt *.dist-info *.egg-info

  # bundle installer
  - cd %SRC_DIR%
  - call
    "C:\Program Files (x86)\NSIS\makensis.exe"
    /V1
    /DVERSION=%RDM_VERSION%.0
    ./build/windows/installer/installer.nsi
  - mv
    "build/windows/installer/redis-desktop-manager-%RDM_VERSION%.0.exe"
    "%SRC_DIR%/redis-desktop-manager-%RELEASE_TAG%.exe"

  # create artifacts
  - cd %APPVEYOR_BUILD_FOLDER%
  - 7z.exe a
    "redis-desktop-manager-%RELEASE_TAG%.zip"
    "%SRC_DIR%/redis-desktop-manager-%RELEASE_TAG%.exe"

artifacts:
  - path: redis-desktop-manager-$(RELEASE_TAG).zip

deploy:
  release: $(RELEASE_TAG)
  description: "Thank you [RedisDesktopManager](https://github.com/uglide/RedisDesktopManager)!"
  provider: GitHub
  auth_token:
    secure: s9uw2NujMMtddlR5nLNRnwiTHhHLhuUsPL3w4PLbucCNBS9EQKBXBY4JfuMcUCZL # your encrypted token from GitHub
  artifact: redis-desktop-manager-$(RELEASE_TAG).zip # upload all NuGet packages to release assets
  draft: true
  prerelease: true
  force_update: true
  on:
    branch: master # release from master branch only
